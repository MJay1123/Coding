지민이는 다양한 크기의 정사각형 모양 돗자리를 가지고 공원에 소풍을 나왔습니다. 공원에는 이미 돗자리를 깔고 여가를 즐기는 사람들이 많아 지민이가 깔 수 있는 가장 큰 돗자리가 어떤 건지 확인하려 합니다. 예를 들어 지민이가 가지고 있는 돗자리의 한 변 길이가 5, 3, 2 세 종류이고, 사람들이 다음과 같이 앉아 있다면 지민이가 깔 수 있는 가장 큰 돗자리는 3x3 크기입니다.

지민이가 가진 돗자리들의 한 변의 길이들이 담긴 정수 리스트 mats, 현재 공원의 자리 배치도를 의미하는 2차원 문자열 리스트 park가 주어질 때 지민이가 깔 수 있는 가장 큰 돗자리의 한 변 길이를 return 하도록 solution 함수를 완성해 주세요. 아무런 돗자리도 깔 수 없는 경우 -1을 return합니다.
--------------------------------------------------------
import java.util.*;
class Solution {
    public int solution(int[] mats, String[][] park) {
        int answer = -1;

        int parkY = park.length;
        int parkX = park[0].length;
        Arrays.sort(mats); // park길이 변수 선언 + mats배열 정렬
        
        for(int m=0; m<mats.length; m++){
            int result = 0;
            if(mats[m] > Math.min(parkX, parkY)){
                result--; // 돗자리가 너무 크면 out
            } else {
                for(int y=0; y<=parkY-mats[m]; y++){
                    for(int x=0; x<=parkX-mats[m]; x++){
                        result = 0;
                        for(int dy=0; dy<mats[m]; dy++){
                            for(int dx=0; dx<mats[m]; dx++){
                                if(!park[y+dy][x+dx].equals("-1")){
                                    result--; // "-1"이 아닌 칸이 존재하면 out
                                }
                            }
                        }
                        if(result == 0){
                            answer = mats[m];
                        }
                    }
                }
            }
        }
        return answer;
    }
}
---------------------------------------------------------
import java.util.*;

class Solution {
    public int solution(int[] mats, String[][] park) {
        // 정렬
        Arrays.sort(mats);

        // 큰 것부터 조회
        for(int i = mats.length - 1; i >= 0; i--) {
            int size = mats[i];

            // 돗자리 설치 가능 확인
            if(canPlaceMat(size, park)) {
                return size;
            }
        }

        // 가능한 돗자리가 없는 경우
        return -1;
    }

        // 돗자리 설치 가능한지
    private static boolean canPlaceMat(int size, String[][] park) {
        int rows = park.length;
        int cols = park[0].length;

        for (int i = 0; i <= rows - size; i++) {
            for (int j = 0; j <= cols - size; j++) {
                if (isAreaEmpty(i, j, size, park)) {
                    return true;
                }
            }
        }
        return false;
    }

    // 특정 영역이 빈 공간인지 확인
    private static boolean isAreaEmpty(int startX, int startY, int size, String[][] park) {
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (!park[startX + i][startY + j].equals("-1")) {
                    return false;
                }
            }
        }
        return true;
    }
}
--------------------------------------------------------
import java.util.Arrays;
class Solution {
    public int solution(int[] mats, String[][] park) {
        int answer = -1;
        Arrays.sort(mats);
        //매트 내림차순
        for(int i=0; i<mats.length/2; i++){
            int temp = mats[i];
            mats[i] = mats[mats.length-1-i];
            mats[mats.length-1-i] = temp;
        }
        
        for(int k : mats){
            for(int i=0; i<park.length; i++){
                for(int j=0; j<park[0].length; j++){
                    if(park[i][j].equals("-1") && i+k < park.length && j+k < park.length){
                        boolean flag = true;
                        for(int m=0; m<k; m++){
                            for(int n=0; n<k; n++){
                                if(!park[i+m][j+n].equals("-1")){
                                    flag = false;
                                    break;
                                }
                            }if(!flag) break;
                        }if(flag) return k;
                    }
                }
            }
        }

        return answer;
    }
}
