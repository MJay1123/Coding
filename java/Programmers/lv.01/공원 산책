지나다니는 길을 'O', 장애물을 'X'로 나타낸 직사각형 격자 모양의 공원에서 로봇 강아지가 산책을 하려합니다. 산책은 로봇 강아지에 미리 입력된 명령에 따라 진행하며, 명령은 다음과 같은 형식으로 주어집니다.

["방향 거리", "방향 거리" … ]
예를 들어 "E 5"는 로봇 강아지가 현재 위치에서 동쪽으로 5칸 이동했다는 의미입니다. 로봇 강아지는 명령을 수행하기 전에 다음 두 가지를 먼저 확인합니다.

주어진 방향으로 이동할 때 공원을 벗어나는지 확인합니다.
주어진 방향으로 이동 중 장애물을 만나는지 확인합니다.
위 두 가지중 어느 하나라도 해당된다면, 로봇 강아지는 해당 명령을 무시하고 다음 명령을 수행합니다.
공원의 가로 길이가 W, 세로 길이가 H라고 할 때, 공원의 좌측 상단의 좌표는 (0, 0), 우측 하단의 좌표는 (H - 1, W - 1) 입니다.

image

공원을 나타내는 문자열 배열 park, 로봇 강아지가 수행할 명령이 담긴 문자열 배열 routes가 매개변수로 주어질 때, 로봇 강아지가 모든 명령을 수행 후 놓인 위치를 [세로 방향 좌표, 가로 방향 좌표] 순으로 배열에 담아 return 하도록 solution 함수를 완성해주세요.
------------------------------------------------------------------
import java.util.*;
class Solution {
    public int[] solution(String[] park, String[] routes) {
        int[] location = findS(park);
        for(int i=0; i<routes.length; i++){
            move(park, location, routes[i]);
            System.out.println("location : " + location[0] + location[1]);
        }
        return location;
    }
    private static void move(String[] park, int[] location, String route){ // 위치 이동
        String direction = Direction(route);
        int distance = Distance(route);
        int y = location[0];
        int x = location[1];
        switch(direction){
            case "N":
                if(location[0] - distance >= 0){ // 공원을 벗어나면 안됨
                    for(int i=1; i<= distance; i++){
                        if (Character.toString(park[y-i].charAt(x)).equals("X")){
                            return; // 장애물있으면 못 지나감
                        }
                    }
                    location[0] -= distance;
                }
                break;
            case "S":
                if(location[0] + distance < park.length){
                    for(int i=1; i<= distance; i++){
                        if (Character.toString(park[y+i].charAt(x)).equals("X")){
                            return;
                        }
                    }
                    location[0] += distance;
                }
                break;
            case "E":
                if(location[1] + distance < park[0].length()){
                    for(int i=1; i<= distance; i++){
                        if (Character.toString(park[y].charAt(x+i)).equals("X")){
                            return;
                        }
                    }
                    location[1] += distance;
                }
                break;
            case "W":
                if(location[1] - distance >= 0){
                    for(int i=1; i<= distance; i++){
                        if (Character.toString(park[y].charAt(x-i)).equals("X")){
                            return;
                        }
                    }
                    location[1] -= distance;
                }
                break;
        }
    }
    
    private static int[] findS(String[] park){ // 시작지점 반환
        int[] start = new int[2];
        for(int i=0; i<park.length; i++){
            for(int j=0; j<park[0].length(); j++){
                if(Character.toString(park[i].charAt(j)).equals("S")){
                    start[0] = i;
                    start[1] = j;
                    return start;
                }
            }
        }
        return start;
    }
    private static String Direction(String route){ // 방향 반환
        String a = Character.toString(route.charAt(0));
        return a;
    }
    private static int Distance(String route){ // 거리 반환
        int a = Integer.parseInt(route.substring(2));
        return a;
    }
}
