얀에서는 매년 달리기 경주가 열립니다. 해설진들은 선수들이 자기 바로 앞의 선수를 추월할 때 추월한 선수의 이름을 부릅니다. 예를 들어 1등부터 3등까지 "mumu", "soe", "poe" 선수들이 순서대로 달리고 있을 때, 해설진이 "soe"선수를 불렀다면 2등인 "soe" 선수가 1등인 "mumu" 선수를 추월했다는 것입니다. 즉 "soe" 선수가 1등, "mumu" 선수가 2등으로 바뀝니다.

선수들의 이름이 1등부터 현재 등수 순서대로 담긴 문자열 배열 players와 해설진이 부른 이름을 담은 문자열 배열 callings가 매개변수로 주어질 때, 경주가 끝났을 때 선수들의 이름을 1등부터 등수 순서대로 배열에 담아 return 하는 solution 함수를 완성해주세요.
----------------------------------------------------------
시간 초과 이슈
class Solution {
    
    public String[] solution(String[] players, String[] callings) {
        String[] answer = {};
        for(int i=0; i<callings.length; i++){
            change(players, callings[i]);
        }
        return players;
    }
    private static void change(String[] players, String call){
        for(int i=0; i<players.length; i++){
            if(players[i].equals(call)){
                String temp = players[i];
                players[i] = players[i-1];
                players[i-1] = temp;
            }
        }
    }
}
--------------------------------------------------------
List 메소드로 변경해봤지만 여전히 시간 초과 이슈;
import java.util.*;
class Solution {
    
    public String[] solution(String[] players, String[] callings) {
        List<String> playersList = Arrays.asList(players);
        String[] answer = {};
        for(int i=0; i<callings.length; i++){
            change(playersList, callings[i]);
        }
        int arrListSize = playersList.size();
        answer = playersList.toArray(new String[arrListSize]);
        return answer;
    }
    
    private static void change(List<String> playersList, String call){
        int index = playersList.indexOf(call);
        String temp = playersList.get(index);
        playersList.set(index, playersList.get(index-1));
        playersList.set(index-1, temp);
    }
}
-------------------------------------------------------
import java.util.HashMap;

class Solution {
    public String[] solution(String[] players, String[] callings) {
        // 선수 이름과 해당 인덱스를 기록하는 맵
        HashMap<String, Integer> playerIndexMap = new HashMap<>();
        
        // 선수들의 초기 인덱스를 맵에 저장
        for (int i = 0; i < players.length; i++) {
            playerIndexMap.put(players[i], i);
        }
        
        // callings에 대한 처리
        for (String call : callings) {
            // 호출된 선수의 인덱스를 가져옴
            int currentIndex = playerIndexMap.get(call);
            
            // 바로 앞 선수를 찾고, 두 선수를 교환
            if (currentIndex > 0) {
                String previousPlayer = players[currentIndex - 1];
                
                // 선수 위치 업데이트
                playerIndexMap.put(call, currentIndex - 1);
                playerIndexMap.put(previousPlayer, currentIndex);
                
                // players 배열에서 위치 교환
                players[currentIndex] = previousPlayer;
                players[currentIndex - 1] = call;
            }
        }
        
        return players;
    }
}
