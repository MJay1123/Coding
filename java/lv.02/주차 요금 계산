주차장의 요금표와 차량이 들어오고(입차) 나간(출차) 기록이 주어졌을 때, 차량별로 주차 요금을 계산하려고 합니다. 아래는 하나의 예시를 나타냅니다.

요금표
기본 시간(분)	기본 요금(원)	단위 시간(분)	단위 요금(원)
180	              5000	        10	          600
 
입/출차 기록
시각(시:분)	차량 번호	내역
05:34	5961	입차
06:00	0000	입차
06:34	0000	출차
07:59	5961	출차
07:59	0148	입차
18:59	0000	입차
19:09	0148	출차
22:59	5961	입차
23:00	5961	출차
 

자동차별 주차 요금
차량 번호	누적 주차 시간(분)	주차 요금(원)
0000	34 + 300 = 334	5000 + ⌈(334 - 180) / 10⌉ x 600 = 14600
0148	670	5000 +⌈(670 - 180) / 10⌉x 600 = 34400
5961	145 + 1 = 146	5000
어떤 차량이 입차된 후에 출차된 내역이 없다면, 23:59에 출차된 것으로 간주합니다.
0000번 차량은 18:59에 입차된 이후, 출차된 내역이 없습니다. 따라서, 23:59에 출차된 것으로 간주합니다.
00:00부터 23:59까지의 입/출차 내역을 바탕으로 차량별 누적 주차 시간을 계산하여 요금을 일괄로 정산합니다.
누적 주차 시간이 기본 시간이하라면, 기본 요금을 청구합니다.
누적 주차 시간이 기본 시간을 초과하면, 기본 요금에 더해서, 초과한 시간에 대해서 단위 시간 마다 단위 요금을 청구합니다.
초과한 시간이 단위 시간으로 나누어 떨어지지 않으면, 올림합니다.
⌈a⌉ : a보다 작지 않은 최소의 정수를 의미합니다. 즉, 올림을 의미합니다.
주차 요금을 나타내는 정수 배열 fees, 자동차의 입/출차 내역을 나타내는 문자열 배열 records가 매개변수로 주어집니다.
차량 번호가 작은 자동차부터 청구할 주차 요금을 차례대로 정수 배열에 담아서 return 하도록 solution 함수를 완성해주세요.
------------------------------------------------------------------------------------------------------------------------------------
import java.util.*;

class Solution {
    
    public int[] solution(int[] fees, String[] records) {
        // fees[0] 기본 시간(분) / fees[1] 기본 요금(원) / feels[2] 단위시간(분) / fees[3] 단위요금(원)
        List<String> carNumberList = new ArrayList<>();
        for(int i=0; i<records.length; i++){
            if(!carNumberList.contains(records[i].split(" ")[1])){
                carNumberList.add(records[i].split(" ")[1]);
            }
        }
        Collections.sort(carNumberList);
        
        int[] answer = new int[carNumberList.size()];
        // HashSet의 차 번호 array 받음 -> 시간을 전부 반환 -> 주차 총 시간 계산 -> 주차비 계산 -> answer에 추가
        int i = 0;
        for(String carNumber : carNumberList){
            List<String> list = getList(carNumber, records);
            int time = getTime(list);
            int charge = feeCalculate(time, fees);
            answer[i] = charge;
            i++;
        }
        
        return answer;
    }
    
    public static int getTime(List<String> list){
        int time = 0;
        while(list.size() > 0){
            if(list.size() >= 2){
                String str1 = list.get(0);
                String str2 = list.get(1);
                list.remove(0);
                list.remove(0);
                time += changeMinute(str2.split(" ")[0]) - changeMinute(str1.split(" ")[0]);
            } else {
                String str1 = list.get(0);
                list.remove(0);
                time += changeMinute("23:59") - changeMinute(str1.split(" ")[0]);
            }
        }
        return time;
    }
    
    public static List<String> getList(String carNumber, String[] records){
        List<String> list = new ArrayList<>();
        for(int i=0; i<records.length; i++){
            if(records[i].split(" ")[1].equals(carNumber)){
                list.add(records[i]);
            }
        }
        return list;
    }
    
    public static int changeMinute(String time){
        int hour = Integer.parseInt(time.split(":")[0]);
        int minute = Integer.parseInt(time.split(":")[1]);
        return hour * 60 + minute;
    }
    
    public static int feeCalculate(int time, int[] fees){
        if(time <= fees[0]){
            return fees[1];
        } else {
            return fees[1] + (int)Math.ceil((1.0*time-fees[0])/fees[2]) * fees[3];
        }
    }
}
